// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type SoulcoreStatus string

const (
	SoulcoreStatusObtained SoulcoreStatus = "obtained"
	SoulcoreStatusUnlocked SoulcoreStatus = "unlocked"
)

func (e *SoulcoreStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SoulcoreStatus(s)
	case string:
		*e = SoulcoreStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SoulcoreStatus: %T", src)
	}
	return nil
}

type NullSoulcoreStatus struct {
	SoulcoreStatus SoulcoreStatus
	Valid          bool // Valid is true if SoulcoreStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSoulcoreStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SoulcoreStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SoulcoreStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSoulcoreStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SoulcoreStatus), nil
}

type Character struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Name      string
	World     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type CharactersSoulcore struct {
	CharacterID uuid.UUID
	CreatureID  uuid.UUID
}

type Creature struct {
	ID   uuid.UUID
	Name string
}

type List struct {
	ID        uuid.UUID
	AuthorID  uuid.UUID
	Name      string
	ShareCode pgtype.UUID
	World     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type ListsSoulcore struct {
	ListID     uuid.UUID
	CreatureID uuid.UUID
	Status     SoulcoreStatus
}

type ListsUser struct {
	ListID      uuid.UUID
	UserID      uuid.UUID
	CharacterID uuid.UUID
}

type User struct {
	ID                         uuid.UUID
	IsAnonymous                bool
	SessionToken               pgtype.UUID
	Email                      pgtype.Text
	Password                   pgtype.Text
	EmailVerified              bool
	EmailVerificationToken     pgtype.UUID
	EmailVerificationExpiresAt pgtype.Timestamptz
	CreatedAt                  pgtype.Timestamptz
	UpdatedAt                  pgtype.Timestamptz
}
