// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lists.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addListCharacter = `-- name: AddListCharacter :exec
INSERT INTO lists_users (list_id, user_id, character_id)
VALUES ($1, $2, $3)
`

type AddListCharacterParams struct {
	ListID      uuid.UUID `json:"list_id"`
	UserID      uuid.UUID `json:"user_id"`
	CharacterID uuid.UUID `json:"character_id"`
}

func (q *Queries) AddListCharacter(ctx context.Context, arg AddListCharacterParams) error {
	_, err := q.db.Exec(ctx, addListCharacter, arg.ListID, arg.UserID, arg.CharacterID)
	return err
}

const createList = `-- name: CreateList :one
INSERT INTO lists (author_id, name, world)
VALUES ($1, $2, $3)
RETURNING id, author_id, name, share_code, world, created_at, updated_at
`

type CreateListParams struct {
	AuthorID uuid.UUID `json:"author_id"`
	Name     string    `json:"name"`
	World    string    `json:"world"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRow(ctx, createList, arg.AuthorID, arg.Name, arg.World)
	var i List
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.ShareCode,
		&i.World,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getList = `-- name: GetList :one
SELECT id, author_id, name, share_code, world, created_at, updated_at FROM lists
WHERE id = $1
`

func (q *Queries) GetList(ctx context.Context, id uuid.UUID) (List, error) {
	row := q.db.QueryRow(ctx, getList, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.ShareCode,
		&i.World,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListsByAuthorId = `-- name: GetListsByAuthorId :many
SELECT id, author_id, name, share_code, world, created_at, updated_at FROM lists
WHERE author_id = $1
`

func (q *Queries) GetListsByAuthorId(ctx context.Context, authorID uuid.UUID) ([]List, error) {
	rows, err := q.db.Query(ctx, getListsByAuthorId, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []List{}
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Name,
			&i.ShareCode,
			&i.World,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembers = `-- name: GetMembers :one
SELECT list_id, user_id, character_id FROM lists_users
WHERE list_id = $1
`

func (q *Queries) GetMembers(ctx context.Context, listID uuid.UUID) (ListsUser, error) {
	row := q.db.QueryRow(ctx, getMembers, listID)
	var i ListsUser
	err := row.Scan(&i.ListID, &i.UserID, &i.CharacterID)
	return i, err
}
