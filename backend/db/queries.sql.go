// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addListCharacter = `-- name: AddListCharacter :exec
INSERT INTO lists_users (list_id, user_id, character_id)
VALUES ($1, $2, $3)
`

type AddListCharacterParams struct {
	ListID      uuid.UUID `json:"list_id"`
	UserID      uuid.UUID `json:"user_id"`
	CharacterID uuid.UUID `json:"character_id"`
}

func (q *Queries) AddListCharacter(ctx context.Context, arg AddListCharacterParams) error {
	_, err := q.db.Exec(ctx, addListCharacter, arg.ListID, arg.UserID, arg.CharacterID)
	return err
}

const createAnonymousUser = `-- name: CreateAnonymousUser :one
INSERT INTO users (session_token)
VALUES ($1)
RETURNING id, is_anonymous, session_token, email, password, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

func (q *Queries) CreateAnonymousUser(ctx context.Context, sessionToken pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, createAnonymousUser, sessionToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsAnonymous,
		&i.SessionToken,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCreature = `-- name: CreateCreature :one
INSERT INTO creatures (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateCreature(ctx context.Context, name string) (Creature, error) {
	row := q.db.QueryRow(ctx, createCreature, name)
	var i Creature
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createList = `-- name: CreateList :one
INSERT INTO lists (author_id, name, world)
VALUES ($1, $2, $3)
RETURNING id, author_id, name, share_code, world, created_at, updated_at
`

type CreateListParams struct {
	AuthorID uuid.UUID `json:"author_id"`
	Name     string    `json:"name"`
	World    string    `json:"world"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRow(ctx, createList, arg.AuthorID, arg.Name, arg.World)
	var i List
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.ShareCode,
		&i.World,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, email_verification_token, email_verification_expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, is_anonymous, session_token, email, password, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type CreateUserParams struct {
	Email                      pgtype.Text        `json:"email"`
	Password                   pgtype.Text        `json:"password"`
	EmailVerificationToken     pgtype.UUID        `json:"email_verification_token"`
	EmailVerificationExpiresAt pgtype.Timestamptz `json:"email_verification_expires_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.EmailVerificationToken,
		arg.EmailVerificationExpiresAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsAnonymous,
		&i.SessionToken,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCharacter = `-- name: GetCharacter :one
SELECT id, user_id, name, world, created_at, updated_at FROM characters
WHERE id = $1
`

func (q *Queries) GetCharacter(ctx context.Context, id uuid.UUID) (Character, error) {
	row := q.db.QueryRow(ctx, getCharacter, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.World,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCharactersByUserId = `-- name: GetCharactersByUserId :many
SELECT id, user_id, name, world, created_at, updated_at FROM characters
WHERE user_id = $1
`

func (q *Queries) GetCharactersByUserId(ctx context.Context, userID uuid.UUID) ([]Character, error) {
	rows, err := q.db.Query(ctx, getCharactersByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Character{}
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.World,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCreatures = `-- name: GetCreatures :many

SELECT id, name
FROM creatures
ORDER BY name
`

// TODO: divide into smaller chunks
func (q *Queries) GetCreatures(ctx context.Context) ([]Creature, error) {
	rows, err := q.db.Query(ctx, getCreatures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Creature{}
	for rows.Next() {
		var i Creature
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getList = `-- name: GetList :one
SELECT id, author_id, name, share_code, world, created_at, updated_at FROM lists
WHERE id = $1
`

func (q *Queries) GetList(ctx context.Context, id uuid.UUID) (List, error) {
	row := q.db.QueryRow(ctx, getList, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.ShareCode,
		&i.World,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMembers = `-- name: GetMembers :one
SELECT list_id, user_id, character_id FROM lists_users
WHERE list_id = $1
`

func (q *Queries) GetMembers(ctx context.Context, listID uuid.UUID) (ListsUser, error) {
	row := q.db.QueryRow(ctx, getMembers, listID)
	var i ListsUser
	err := row.Scan(&i.ListID, &i.UserID, &i.CharacterID)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, is_anonymous, session_token, email, password, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsAnonymous,
		&i.SessionToken,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCharacters = `-- name: GetUserCharacters :many
SELECT id, name, world
FROM characters
WHERE user_id = $1
ORDER BY name
`

type GetUserCharactersRow struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	World string    `json:"world"`
}

func (q *Queries) GetUserCharacters(ctx context.Context, userID uuid.UUID) ([]GetUserCharactersRow, error) {
	rows, err := q.db.Query(ctx, getUserCharacters, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserCharactersRow{}
	for rows.Next() {
		var i GetUserCharactersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.World); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLists = `-- name: GetUserLists :many
SELECT DISTINCT
    l.id, l.author_id, l.name, l.share_code, l.world, l.created_at, l.updated_at,
    CASE WHEN l.author_id = $1 THEN TRUE ELSE FALSE END AS is_author
FROM lists l
LEFT JOIN lists_users lu ON l.id = lu.list_id AND lu.user_id = $1
WHERE l.author_id = $1 OR lu.user_id = $1
ORDER BY l.created_at DESC
`

type GetUserListsRow struct {
	ID        uuid.UUID          `json:"id"`
	AuthorID  uuid.UUID          `json:"author_id"`
	Name      string             `json:"name"`
	ShareCode pgtype.UUID        `json:"share_code"`
	World     string             `json:"world"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	IsAuthor  bool               `json:"is_author"`
}

func (q *Queries) GetUserLists(ctx context.Context, authorID uuid.UUID) ([]GetUserListsRow, error) {
	rows, err := q.db.Query(ctx, getUserLists, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserListsRow{}
	for rows.Next() {
		var i GetUserListsRow
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Name,
			&i.ShareCode,
			&i.World,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAuthor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const migrateAnonymousUser = `-- name: MigrateAnonymousUser :one
UPDATE users
SET email = $1,
    password = $2,
    email_verification_token = $3,
    email_verification_expires_at = $4,
    is_anonymous = false
WHERE id = $5
RETURNING id, is_anonymous, session_token, email, password, email_verified, email_verification_token, email_verification_expires_at, created_at, updated_at
`

type MigrateAnonymousUserParams struct {
	Email                      pgtype.Text        `json:"email"`
	Password                   pgtype.Text        `json:"password"`
	EmailVerificationToken     pgtype.UUID        `json:"email_verification_token"`
	EmailVerificationExpiresAt pgtype.Timestamptz `json:"email_verification_expires_at"`
	ID                         uuid.UUID          `json:"id"`
}

func (q *Queries) MigrateAnonymousUser(ctx context.Context, arg MigrateAnonymousUserParams) (User, error) {
	row := q.db.QueryRow(ctx, migrateAnonymousUser,
		arg.Email,
		arg.Password,
		arg.EmailVerificationToken,
		arg.EmailVerificationExpiresAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.IsAnonymous,
		&i.SessionToken,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.EmailVerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyEmail = `-- name: VerifyEmail :exec
UPDATE users
SET email_verified = true,
    email_verification_token = NULL,
    email_verification_expires_at = NULL
WHERE id = $1 AND email_verification_token = $2
`

type VerifyEmailParams struct {
	ID                     uuid.UUID   `json:"id"`
	EmailVerificationToken pgtype.UUID `json:"email_verification_token"`
}

func (q *Queries) VerifyEmail(ctx context.Context, arg VerifyEmailParams) error {
	_, err := q.db.Exec(ctx, verifyEmail, arg.ID, arg.EmailVerificationToken)
	return err
}
